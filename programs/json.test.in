#!/bin/sh
# json.test
#
# Copyright (C) 2018-2020 Free Software Foundation, Inc.
#
# This program is free software, licensed under the terms of the GNU
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Reini Urban

test "$datadir" || { echo ERROR: Env var datadir not set ; exit 1 ; }

problems=0
DATA="sample_2000 example_2000 example_2004 example_2007 example_2010"
DATA="$DATA example_2013 example_2018 example_r14"
TODO="r11/ACEL10"
SED=@SED@
JQ=@JQ@

for d in $DATA; do
    b=$(basename "$d")
    rm "$b.json" 2>/dev/null
done

check_roundtrip() {
    if [ -f "$dwg" -a -x dwgwrite ]
    then
        json=$(basename "$dwg" .dwg).json
        tgt=$(basename "$dwg")
        log1=$(basename "$dwg" .dwg).log1
        log2=$(basename "$dwg" .dwg).log2
        ../libtool --mode=execute ./dwgread -y -v2 -o "$json" "$dwg" 2>$log1 >/dev/null
        ../libtool --mode=execute ./dwgwrite -y -v0 -o "$tgt" "$json" 2>/dev/null >/dev/null
        ../libtool --mode=execute ./dwgread -v2 "$tgt" 2>$log2 >/dev/null
        expect=$(egrep -c '^Add entity' "$log1")
        got=$(egrep -c '^Add entity' "$log2")
        rm "$json" "$tgt" 2>/dev/null
        if [ "$got" = "$expect" ]
        then
            echo "$json" roundtrip ok
            rm "$log1" "$log2" 2>/dev/null
        elif [ "$got" = "0" ]
        then
            echo "$json" "roundtrip fail: $expect vs $got entities"
            problems=$(expr 1 + $problems)
            echo "expect=$expect" >$log
            echo "got=$got" >>$log
        else
            echo "$json" "roundtrip fail: $expect vs $got entities (TODO)"
            #problems=$(expr 1 + $problems)
            echo "expect=$expect" >$log
            echo "got=$got" >>$log
        fi
    fi
}

for dwg in $DATA; do
    json="$(basename "$dwg" .dwg).json"
    log="$json.log"
    dwg="${datadir}/$dwg.dwg"
    echo dwgread -Ojson -o"$json" "$dwg"
    # With --enable-debug fixup nan
    if ../libtool --mode=execute ./dwgread -Ojson -o"$json" "$dwg" 2>/dev/null && \
       @JSON_SED_NAN@ "$json" && \
       $JQ . "$json" >"$json.log" 2>&1
    then
        rm "$json.log" "$json"
    else
        cat "$json.log"
        problems=$(expr 1 + $problems)
    fi

    geojson="$(basename "$dwg" .dwg).geojson"
    echo dwgread -o"$geojson" "$dwg"
    if ../libtool --mode=execute ./dwgread -Ogeojson -o"$geojson" "$dwg" 2>/dev/null && \
       @JSON_SED_NAN@ "$geojson" && \
       $JQ . "$geojson" >>"$json.log" 2>&1
    then
        rm "$json.log" "$geojson"
    else
        cat "$json.log"
        problems=$(expr 1 + $problems)
    fi

    check_roundtrip
done

if test x0 = x$problems ; then
    exit 0
else
    echo $(basename "$0"): $problems failures
    ls -l ./*json.log
    exit 1
fi
